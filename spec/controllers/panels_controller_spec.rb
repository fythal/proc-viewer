# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PanelsController do

  # This should return the minimal set of attributes required to create a valid
  # Panel. As you add validations to Panel, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "number" => "n1" } }
  let(:valid_attributes_for_super_panel) { { "pane_number" =>"m1", "pane_location" => "c1" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PanelsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "@boards に盤の配列を割り当てる" do
      board = Board.create! name: "foo-board"
      board.panels.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:boards)).to be_kind_of(ActiveRecord::Relation)
      expect(assigns(:boards).first).to be_kind_of(Board)
    end
  end

  describe "GET show" do
    it "assigns the requested panel as @panel" do
      panel = Panel.create! valid_attributes
      get :show, {:id => panel.to_param}, valid_session
      assigns(:panel).should eq(panel)
    end
  end

  describe "GET new" do
    it "assigns a new panel as @panel" do
      get :new, {}, valid_session
      assigns(:panel).should be_a_new(Panel)
    end

    it "すべての盤オブジェクトを @boards にアサインする" do
      board = stub_model(Board, code: "foo", name: "bar")
      Board.stub(:all).and_return([board])
      get :new, {}, valid_session
      expect(assigns(:boards)).to eq([board])
    end
  end

  describe "GET edit" do
    it "assigns the requested panel as @panel" do
      panel = Panel.create! valid_attributes
      get :edit, {:id => panel.to_param}, valid_session
      assigns(:panel).should eq(panel)
    end

    it "すべての盤オブジェクトを @boards にアサインする" do
      board = stub_model(Board, code: "foo", name: "bar")
      Board.stub(:all).and_return([board])
      panel = Panel.create! valid_attributes
      get :edit, {id: panel.to_param}, valid_session
      expect(assigns(:boards)).to eq([board])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Panel" do
        expect {
          post :create, {:panel => valid_attributes}, valid_session
        }.to change(Panel, :count).by(1)
      end

      it "assigns a newly created panel as @panel" do
        post :create, {:panel => valid_attributes}, valid_session
        assigns(:panel).should be_a(Panel)
        assigns(:panel).should be_persisted
      end

      it "redirects to the created panel" do
        post :create, {:panel => valid_attributes}, valid_session
        response.should redirect_to(Panel.last)
      end
    end

    describe "一括警報作成のための値が params に渡されたとき" do
      before (:each) do
        @attributes = valid_attributes.merge(valid_attributes_for_super_panel)
      end

      it "新しい Panel オブジェクトを生成する" do
        expect { post :create, {:panel => @attributes}, valid_session }.to change(Panel, :count).by(1)
      end

      it "新しい Panel オブジェクトを @panel にアサインする" do
        post :create, {:panel => @attributes}, valid_session
        assigns(:panel).should be_a(Panel)
        assigns(:panel).should be_persisted
      end

      it "Panel クラスは、親パネルに子パネルを配置するための assign メッセージを受け取る" do
        Panel.should_receive(:assign)
        post :create, {:panel => @attributes}, valid_session
      end

      it "新しい Panel オブジェクトの panel 属性は親の Panel オブジェクトである" do
        post :create, {:panel => @attributes}, valid_session
        expect(assigns(:panel).panel).to be_kind_of(Panel)
        expect(assigns(:panel).panel).to be_persisted
      end

      it "新しい Panel オブジェクトは場所に配置されている" do
        post :create, {:panel => @attributes}, valid_session
        expect(assigns(:panel).location).to be_kind_of(Location)
        expect(assigns(:panel).location.location).not_to be_blank
      end

      it "新しい Panel オブジェクトの詳細画面へリダイレクトする" do
        post :create, {:panel => @attributes}, valid_session
        response.should redirect_to(Panel.last)
      end
    end


    describe "with invalid params" do
      it "新しく生成されたが、まだ保存されていない警報パネルオブジェクトを @panel にアサインする" do
        # Trigger the behavior that occurs when invalid params are submitted
        Panel.any_instance.stub(:save).and_return(false)
        post :create, {:panel => { "number" => "invalid value" }}, valid_session
        assigns(:panel).should be_a_new(Panel)
      end

      it "new テンプレートを再描画する" do
        # Trigger the behavior that occurs when invalid params are submitted
        Panel.any_instance.stub(:save).and_return(false)
        post :create, {:panel => { "number" => "invalid value" }}, valid_session
        response.should render_template("new")
      end

      it "すべての盤オブジェクトを @boards にアサインする" do
        Panel.any_instance.stub(:save).and_return(false)
        board = stub_model(Board, code: "foo", name: "bar")
        Board.stub(:all).and_return([board])
        post :create, {:panel => { "number" => "invalid value" }}, valid_session
        expect(assigns(:boards)).to eq([board])
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested panel" do
        panel = Panel.create! valid_attributes
        # Assuming there are no other panels in the database, this
        # specifies that the Panel created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Panel.any_instance.should_receive(:update).with({ "number" => "MyString" })
        put :update, {:id => panel.to_param, :panel => { "number" => "MyString" }}, valid_session
      end

      it "assigns the requested panel as @panel" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => valid_attributes}, valid_session
        assigns(:panel).should eq(panel)
      end

      it "number 属性をアップデートする" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => { :number => "foo" }}, valid_session
        expect(assigns(:panel).number).to eq("foo")
      end

      it "width 属性をアップデートする" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => { :width => "5" }}, valid_session
        expect(assigns(:panel).width).to eq(5)
      end

      it "height 属性をアップデートする" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => { :height => "5" }}, valid_session
        expect(assigns(:panel).height).to eq(5)
      end

      it "board_id 属性 (所属する盤) をアップデートする" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => { :board_id => "100" }}, valid_session
        expect(assigns(:panel).board_id).to eq(100)
      end

      it "親パネルをアップデートする" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => { :panel_number => "foobar" }}, valid_session
        expect(assigns(:panel).panel.number).to eq("foobar")
      end

      it "redirects to the panel" do
        panel = Panel.create! valid_attributes
        put :update, {:id => panel.to_param, :panel => valid_attributes}, valid_session
        response.should redirect_to(panel)
      end
    end

    describe "with invalid params" do
      it "警報パネルを @panel にアサインする" do
        panel = Panel.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Panel.any_instance.stub(:save).and_return(false)
        put :update, {:id => panel.to_param, :panel => { "number" => "invalid value" }}, valid_session
        assigns(:panel).should eq(panel)
      end

      it "編集画面を再描画する" do
        panel = Panel.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Panel.any_instance.stub(:save).and_return(false)
        put :update, {:id => panel.to_param, :panel => { "number" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested panel" do
      panel = Panel.create! valid_attributes
      expect {
        delete :destroy, {:id => panel.to_param}, valid_session
      }.to change(Panel, :count).by(-1)
    end

    it "redirects to the panels list" do
      panel = Panel.create! valid_attributes
      delete :destroy, {:id => panel.to_param}, valid_session
      response.should redirect_to(panels_url)
    end
  end

end
